require('dotenv').config();

const fs = require("fs");

const guildId = '768086184517173268'
const { Client, MessageEmbed } = require('discord.js');
const Discord = require('discord.js')
const { waitForDebugger } = require('inspector');
const { listenerCount } = require('events');
const { parse } = require('dotenv');
const client = new Client();
const prefix = "/";

const getApp = (guildId) => {
    const app = client.api.applications(client.user.id)
    if (guildId) {
        app.guilds(guildId)
    }
    return app
}

client.on('ready', async () => {
    console.log('Bot logged in!')
    console.log(`Current bot username is: ${client.user.username}`)
    console.log(`Current bot tag is: ${client.user.tag}`)
    console.log(`Current bot ID is: ${client.user.id}`)
    const commands = await getApp(guildId).commands.get()
    console.log(commands)

    await getApp(guildId).commands.post({
        data: {
            name: 'testreply',
            description: 'A simple reply command',
        },
    })

    await getApp(guildId).commands.post({
        data: {
            name: 'postnewoperation',
            description: 'Post a new operation with some text in an embed.',
        },
    })

    await getApp(guildId).commands.post({
        data: {
            name: 'le1',
            description: 'LAUNCH EXPERIMENT 1 - JSON READ',
        },
    })

    await getApp(guildId).commands.post({
        data: {
            name: 'le2',
            description: 'LAUNCH EXPERIMENT 2 - FIXING THE DAMN MESSAGING ISSUE',
        },
    })

    await getApp(guildId).commands.post({
        data: {
            name: 'schedulemission',
            description: 'Schedule missions using the bot local storage and embeds.',
            options: [
                {
                    name: 'title',
                    description: 'The title of the mission',
                    required: true,
                    type: 3
                },
                {
                    name: 'time',
                    description: 'The time when the mission will start',
                    required: true,
                    type: 3
                },
                {
                    name: 'personnel',
                    description: 'The involved factions or personnel in this mission',
                    required: true,
                    type: 3
                },
                {
                    name: 'description',
                    description: 'The mission order / description',
                    required: true,
                    type: 3
                }
            ]
        },
    })

    client.ws.on('INTERACTION_CREATE', async (interaction) => {
        const message = new Discord.Message()
        const { name, options } = interaction.data

        const command = name.toLowerCase()

        const args = {}
        console.log(options)

        if (options) {
            for(const option of options) {
                const { name, value } = option
                args[name] = value
            }
        }

        console.log(args)
        
        if (command === 'testreply') {
            reply(interaction, 'Reply done, if you see this, the command worked!')
        } else if(command === 'le1') {
            console.log(JSON.parse(missionmessages.json)[1].name)
            reply(interaction, 'check console for experiment result')
        } else if (command === 'le2') {
            const embed = new Discord.MessageEmbed()
            .setColor('#4c4c4c')
            .setTitle('Operation Biggie is gay')
            .setDescription(`You'll be deployed at `)
            .setTimestamp()
            .setFooter('BLACKOUT intelCOM ADMINISTRATION SYSTEM')
            .setDescription("Biggie is gay, and we killed him")
            reply(interaction, embed)
            
        } else if (command === 'postnewoperation') {
            const pnocommandrequester = ''
            console.log(pnocommandrequester)
            reply(interaction, 'Please enter the following details for the embed...')
            message.channel.send('Please input the date of the operation')

        } else if (command === 'schedulemission') {
            const { name, options } = interaction.data

            const command = name.toLowerCase()
    
            const args = {}
            console.log(options)
    
            if (options) {
                for(const option of options) {
                    const { name, value } = option
                    args[name] = value
                }
            }
    
            console.log(args)

            //for (const arg in args) {
            //    const value = args[arg]
            //    const argsresult = arg, value
            //    console.log(argsresult)
            //}

            const argstoprint = {
                title: args[0].title,
                time: args[0].time,
                personnel: args[0].personnel,
                description: args[0].description
            }
            console.log()
            console.log(argstoprint)
            console.log(interaction.data)
            const parseddata = JSON.stringify(args)

            const embed = new Discord.MessageEmbed()
            .setColor('#4c4c4c')
            .setTitle('Mission scheduled!')
            .setDescription('A new mission has been scheduled!')
            .setTimestamp()
            .setFooter('BLACKOUT intelCOM ADMINISTRATION SYSTEM')
            .setDescription(args[title])
            reply(interaction, embed)
            //message.channel.send(interaction, response)
            //message.channel.send(embed)

            fs.writeFile ("./missionmessages.json", argstoprint, err => {
                if (err) throw err;
            })
        }
    })

    const reply = async (interaction, response) => {
        let data = {
            content: response,
        }

        //Checking embeds here:
        if (typeof response == 'object') {
            data = await createAPIMessage(interaction, response)
        }
        client.api.interactions(interaction.id, interaction.token).callback.post({
            data: {
                type: 4,
                data,
            },
        })
    }
});

client.on('message', (message) => {
    console.log(`[${message.author.tag}] sent in ${message.channel}: ${message.content}`);
    if (message.author.bot) return;
    if (message.content.startsWith(prefix)) {
        const [CMD_NAME, ...args] = message.content
        .trim()
        .substring(prefix.length)
        .split("/\s+/");
        console.log(CMD_NAME);
        console.log(args);

        if (CMD_NAME === 'testreply') {
            message.reply(`the reply test is succeeded if you can see this.`)
        }
        if (CMD_NAME === 'le2') {
            const le2embedsend = client.channels.cache.get('879373615819264030');
            le2embedsend.send(embed);
        }
        if (CMD_NAME === 'analyzefile>>242426.wad') {
            message.reply('```Request understood. Checking file.........```')
            message.channel.send('```INTELCOM SYSTEMS\n\nANALYSIS DONE! DISPLAYING RESULTS:\nFILESIZE: 14MB\nJUNKDATA SIZE: 13MB\nRECOVERABLE DATA: YES\nRECOVERABLE DATA TYPE: TEXT\nRECOVERABLE DATA TEXT: "Genata have been the ones responsible apparently for giving the blueprints of the 1000lb bomb to the PoD, Genata wanted the PoD to sell this data to dark corporations around the world, but we came back in time and Liamkoneko with Virt deleted the files from the servers, we thought it was the end, but Genata wanted these files back, since their copies seem to have been deleted by a defective agent which wanted to be back free, and which, from my darkweb files, is currently located in the Canada. So yeah, thats basically it. We`ll see more later down the road"```')
        }
        if (CMD_NAME === 'latestmissionscheduled') {
            const extractfsstringname = fs.readFileSync('./src/missionmessagesstoragemissionname.txt', 'utf-8');
            const extractfsstringtime = fs.readFileSync('./src/missionmessagesstoragemissiontime.txt', 'utf-8');
            const extractfsstringtasked = fs.readFileSync('./src/missionmessagesstoragetaskeddiv.txt', 'utf-8');
            const extractfsstringdesc = fs.readFileSync('./src/missionmessagesstoragedesc.txt', 'utf-8');
            console.log(extractfsstringname)
            console.log(extractfsstringtime)
            console.log(extractfsstringtasked)
            console.log(extractfsstringdesc)
            message.reply('')
            message.channel.send('```INTELCOM SYSTEMS - MISSION VIEWER' + '\nMISSION NAME: ' + extractfsstringname + '\nTASKED DIVISION: ' + extractfsstringtasked + '\nOPERATION TIME: ' + extractfsstringtime + '\nMISSION ORDER ' + extractfsstringdesc)
        }
        if (CMD_NAME === 'searchpersonnelid') {
            messsage.reply('```INTELCOM SYSTEMS\n\nUNABLE TO INITIATE COMMAND, STILL WORK IN PROGRESS. SHUTTING DOWN REQUEST!```')
        }
        if (CMD_NAME === 'help') {
            message.reply('```INTELCOM SYSTEMS\n\n"testreply": Test the bot if it can see and reply to your command.\n"latestmissionscheduled": Show the latest mission order sent by the Hi-Com.\n"searchpersonnelid":ERROR. UNABLE TO DISPLAY HELP MESSAGE. ENTRY IN HELP.TXT MISSING, POTENTIALLY THE COMMAND IS CURRENTLY "WORK IN PROGRESS".```')
        }
    }
});

const createAPIMessage = async (interaction, content) => {
    const { data, files } = await Discord.APIMessage.create(
        client.channels.resolve(interaction.channel_id),
        content
    )
    .resolveData()
    .resolveFiles()

    return { ...data, files }
}

client.login(process.env.BOT_TOKEN);